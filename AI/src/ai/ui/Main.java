/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ai.ui;

import ai.algorithm.Find;
import ai.cell.Cell;
import ai.map.Map;
import static ai.map.Map.map_read_t;
import ai.path.Path;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.DecimalFormat;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ÁdámRichárd
 */
public class Main extends javax.swing.JFrame {

    public static int index = 0;
    public static int max = 0;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        ImageIcon img = new ImageIcon(getClass().getResource("image/right.png"));
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.setOpaque(false);
        jButton1.setIcon(img);

        ImageIcon img2 = new ImageIcon(getClass().getResource("image/left.png"));
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setFocusPainted(false);
        jButton2.setOpaque(false);
        jButton2.setIcon(img2);

//        jList1.setSelectedIndex(0);


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        canvasPanel1 = new ai.ui.CanvasPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 600));
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(987, 50));
        jPanel2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPanel2KeyReleased(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setBorder(null);
        jButton1.setOpaque(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jButton1KeyReleased(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setBorder(null);
        jButton2.setOpaque(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jButton2KeyReleased(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(0, 0, 0));
        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(51, 153, 255));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setBorder(null);
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 855, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout canvasPanel1Layout = new javax.swing.GroupLayout(canvasPanel1);
        canvasPanel1.setLayout(canvasPanel1Layout);
        canvasPanel1Layout.setHorizontalGroup(
            canvasPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 987, Short.MAX_VALUE)
        );
        canvasPanel1Layout.setVerticalGroup(
            canvasPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
        );

        jPanel1.add(canvasPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Megnyitás");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator1);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Kilépés");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Egyéb");

        jMenuItem3.setText("About");
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (index < Map.getShortestPaths().size() - 1) {
            index++;
        }
        if (index == 0) {
            jTextField1.setText("Üres pálya");
        } else {
            jTextField1.setText(index + "/" + (Map.shortestPaths.size() - 1) + " megoldás");
        }
        canvasPanel1.setImageIndex(index);
        canvasPanel1.repaint();
        canvasPanel1.revalidate();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (index > 0) {
            index--;
        }
        if (index == 0) {
            jTextField1.setText("Üres pálya");
        } else {
            jTextField1.setText(index + "/" + (Map.shortestPaths.size() - 1) + " megoldás");
        }

        canvasPanel1.setImageIndex(index);
        canvasPanel1.repaint();
        canvasPanel1.revalidate();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased

    }//GEN-LAST:event_formKeyReleased

    private void jPanel2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel2KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            if (index < Map.getShortestPaths().size() - 1) {
                index++;
            }
            if (index == 0) {
                jTextField1.setText("Üres pálya");
            } else {
                jTextField1.setText(index + "/" + (Map.shortestPaths.size() - 1) + " megoldás");
            }
            canvasPanel1.setImageIndex(index);
            canvasPanel1.repaint();
            canvasPanel1.revalidate();
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            if (index > 0) {
                index--;
            }
            if (index == 0) {
                jTextField1.setText("Üres pálya");
            } else {
                jTextField1.setText(index + "/" + (Map.shortestPaths.size() - 1) + " megoldás");
            }

            canvasPanel1.setImageIndex(index);
            canvasPanel1.repaint();
            canvasPanel1.revalidate();
        }
    }//GEN-LAST:event_jPanel2KeyReleased

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        keyLeftRight(evt.getKeyCode());
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jButton2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyReleased
        keyLeftRight(evt.getKeyCode());
    }//GEN-LAST:event_jButton2KeyReleased

    private void jButton1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyReleased
        keyLeftRight(evt.getKeyCode());
    }//GEN-LAST:event_jButton1KeyReleased

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        index = 0;
        JFileChooser chooser = new JFileChooser(""+System.getProperty("user.dir"));

        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            Map.readMap(chooser.getSelectedFile());
        }
        
        Map.createNewMap(new Path(0));
        long start = System.nanoTime();
        Find.shortestWay(Find.findStartPosition().getX(), Find.findStartPosition().getY(), 0);
        long end = System.nanoTime();
        DecimalFormat df = new DecimalFormat("0.0000");
        Map.solve_time = ""+df.format((end - start) / 1000000000d)+" mp";
        for (int i = 0; i < Map.getShortestPaths().size(); i++) {
            drawPath(Map.getShortestPaths().get(i));
        }

        jTextField1.setText("Üres pálya");
        canvasPanel1.setImageIndex(index);
        canvasPanel1.repaint();
        canvasPanel1.revalidate();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    private void keyLeftRight(int keyCode) {
        if (keyCode == KeyEvent.VK_RIGHT) {
            if (index < Map.getShortestPaths().size() -1) {
                index++;
            }
            if (index == 0) {
                jTextField1.setText("Üres pálya");
            } else {
                jTextField1.setText(index + "/" + (Map.shortestPaths.size() - 1) + " megoldás");
            }
            canvasPanel1.setImageIndex(index);
            canvasPanel1.repaint();
            canvasPanel1.revalidate();
        } else if (keyCode == KeyEvent.VK_LEFT) {
            if (index > 0) {
                index--;
            }
            if (index == 0) {
                jTextField1.setText("Üres pálya");
            } else {
                jTextField1.setText(index + "/" + (Map.shortestPaths.size() - 1) + " megoldás");
            }

            canvasPanel1.setImageIndex(index);
            canvasPanel1.repaint();
            canvasPanel1.revalidate();
        }
    }

    public void drawPath(Path p) {
        BufferedImage bufferedImage = new BufferedImage(canvasPanel1.getSize().width, canvasPanel1.getSize().height, BufferedImage.TYPE_INT_RGB);
        Graphics g2d = bufferedImage.getGraphics();
        int meret = Map.meret;
        if(Map.meret <= 10){
            meret = 40;
        }else if(Map.meret <= 20){
            meret = 20;
        }else if(Map.meret <= 30){
            meret = 15;
        }else if(Map.meret <=40){
            meret = 10;
        }
        int gbox = 50;
        int rbox = 150;
        int rboxw = 10;
        
        g2d.setColor(Color.BLACK);
        g2d.fillRect(0, 0, canvasPanel1.getWidth(), canvasPanel1.getHeight());
        g2d.setColor(Color.GREEN);
        
        g2d.drawString("Pálya adatok", 10, gbox-6);   
        g2d.drawRect(10, gbox, 200, 60);
        g2d.drawString("Pálya mérete: "+Map.meret+" x "+Map.meret, 20, gbox+(1*15));
        g2d.drawString("Kiválasztott megoldás: "+canvasPanel1.bimage.size(), 20, gbox+(2*15));
        g2d.drawString("Megoldás lépésszáma: "+p.getMax_step(), 20, gbox+(3*15));        
        g2d.drawString("Beolvasással kapcsolatos adatok", rboxw, rbox-6);   
        g2d.drawRect(rboxw, rbox, 200, 40);
        g2d.drawString("Pálya beolvasása: "+Map.map_read_t, rboxw+10, rbox+(1*15));        
        g2d.drawString("Algoritmus bejárása: "+Map.solve_time, rboxw+10, rbox+(2*15));
        
        int width = meret;
        int height = meret;
        int x, y;

        for (Cell al1 : Map.map) {
            x = 300 + meret * al1.getY();
            y = meret * al1.getX();
            if (al1.isWall()) {
                g2d.setColor(Color.GRAY);
                g2d.fillRect(x, y, width, height);
            } else if (al1.isFinish()) {
                g2d.setColor(Color.RED);
                g2d.fillRect(x, y, width, height);
            } else if (al1.isStart()) {
                g2d.setColor(Color.BLUE);
                g2d.fillRect(x, y, width, height);
            } else {
                int c = -1;
                for (int k = 0; k < p.getMax_step(); k++) {
                    if (al1.getX() == p.getStep_coordinates()[k][0] && al1.getY() == p.getStep_coordinates()[k][1]) {
                        c = p.getStep_coordinates()[k][2];
                    }
                }
                if (c > -1) {
                    if (c >= 10) {
                        g2d.setColor(Color.GREEN);
                        g2d.fillRect(x, y, width, height);                        
                        g2d.setColor(Color.BLACK);
                        if(Map.meret <= 25)
                            g2d.drawString("" + c, x + 4, y + 15);
                    } else {
                        g2d.setColor(Color.GREEN);
                        g2d.fillRect(x, y, width, height);
                        g2d.setColor(Color.BLACK);
                        if(Map.meret <= 25)
                            g2d.drawString("" + c, x + 8, y + 15);
                    }
                } else {
                    g2d.setColor(Color.WHITE);
                    g2d.fillRect(x, y, width, height);
                }
            }

            g2d.setColor(Color.BLACK);
            g2d.drawRect(x, y, width, height);

        }
        canvasPanel1.setBimage(bufferedImage);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ai.ui.CanvasPanel canvasPanel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
